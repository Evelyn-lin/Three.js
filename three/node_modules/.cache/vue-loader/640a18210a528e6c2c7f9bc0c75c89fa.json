{"remainingRequest":"/Users/evelyn/Desktop/仙桃学院/Three.js/three/node_modules/_vue-loader@15.9.3@vue-loader/lib/index.js??vue-loader-options!/Users/evelyn/Desktop/仙桃学院/Three.js/three/src/components/HelloWorld.vue?vue&type=style&index=0&lang=css&","dependencies":[{"path":"/Users/evelyn/Desktop/仙桃学院/Three.js/three/src/components/HelloWorld.vue","mtime":1597800179748},{"path":"/Users/evelyn/Desktop/仙桃学院/Three.js/three/node_modules/_css-loader@3.6.0@css-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/evelyn/Desktop/仙桃学院/Three.js/three/node_modules/_vue-loader@15.9.3@vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/evelyn/Desktop/仙桃学院/Three.js/three/node_modules/_postcss-loader@3.0.0@postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/evelyn/Desktop/仙桃学院/Three.js/three/node_modules/_cache-loader@4.1.0@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/evelyn/Desktop/仙桃学院/Three.js/three/node_modules/_vue-loader@15.9.3@vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCiNhcHAgewogIGZvbnQtZmFtaWx5OiAnQXZlbmlyJywgSGVsdmV0aWNhLCBBcmlhbCwgc2Fucy1zZXJpZjsKICAtd2Via2l0LWZvbnQtc21vb3RoaW5nOiBhbnRpYWxpYXNlZDsKICAtbW96LW9zeC1mb250LXNtb290aGluZzogZ3JheXNjYWxlOwogIHRleHQtYWxpZ246IGNlbnRlcjsKICBjb2xvcjogIzJjM2U1MDsKfQojY29udGFpbmVyIHsKICBoZWlnaHQ6IDEwMHZoOwp9CiNidXR0b24gewogIGNvbG9yOiByZWQ7CiAgcG9zaXRpb246IGFic29sdXRlOwogIHRvcDogMzBweDsKICBkaXNwbGF5OiBmbGV4OwogIGp1c3RpZnktY29udGVudDogY2VudGVyOwogIHdpZHRoOiAxMDB2dzsKfQojbXlDaGFydCB7CiAgcG9zaXRpb246IGFic29sdXRlOwogIHRvcDogMjAwcHg7CiAgbGVmdDogNTBweDsKfQouYm94LWNhcmQgewogIHBvc2l0aW9uOiBhYnNvbHV0ZTsKICB3aWR0aDogNDgwcHg7CiAgdG9wOiAzMHB4Owp9Cg=="},{"version":3,"sources":["HelloWorld.vue"],"names":[],"mappingswgBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"HelloWorld.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div id=\"app\">\n    <div id=\"button\">\n      <el-button\n        type=\"primary\"\n        @click=\"showFloor(1)\"\n        plain\n      >一层</el-button>\n      <el-button\n        type=\"primary\"\n        @click=\"showFloor(2)\"\n        plain\n      >二层</el-button>\n      <el-button\n        type=\"primary\"\n        @click=\"showFloor(3)\"\n        plain\n      >三层</el-button>\n      <el-button\n        type=\"primary\"\n        @click=\"showFloor(4)\"\n        plain\n      >四层</el-button>\n\n    </div>\n    <div id=\"container\"></div>\n    <div\n      id=\"myChart\"\n      :style=\"{width: '300px', height: '300px'}\"\n    ></div>\n    <!-- <el-card class=\"box-card\">\n      <div\n        slot=\"header\"\n        class=\"clearfix\"\n      >\n        <span>卡片名称</span>\n        <el-button\n          style=\"float: right; padding: 3px 0\"\n          type=\"text\"\n        >操作按钮</el-button>\n      </div>\n      <div\n        v-for=\"o in 4\"\n        :key=\"o\"\n        class=\"text item\"\n      >\n        {{'列表内容 ' + o }}\n      </div>\n    </el-card> -->\n  </div>\n</template>\n\n<script>\nimport * as THREE from 'three'\n// import { OBJLoader, MTLLoader } from 'three-obj-mtl-loader'\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls'\nimport { OBJLoader } from 'three/examples/jsm/loaders/OBJLoader'\nimport { MTLLoader } from 'three/examples/jsm/loaders/MTLLoader'\nimport { DDSLoader } from 'three/examples/jsm/loaders/DDSLoader'\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader'\nimport { CSS2DObject } from 'three/examples/jsm/renderers/CSS2DRenderer.js'\nimport axios from 'axios'\n\nexport default {\n  name: 'App',\n  data() {\n    return {\n      camera: null,\n      scene: null,\n      renderer: null,\n      mesh: null,\n      controls: null,\n      text: null,\n      classrooms: [],\n    }\n  },\n  methods: {\n    init: function () {\n      let container = document.getElementById('container')\n      this.camera = new THREE.PerspectiveCamera(\n        45,\n        container.clientWidth / container.clientHeight,\n        0.01,\n        100000\n      )\n      this.camera.position.set(80, 60, 120)\n      this.scene = new THREE.Scene()\n      // 辅助坐标系\n      // var axisHelper = new THREE.AxisHelper(250)\n      // this.scene.add(axisHelper)\n\n      this.renderer = new THREE.WebGLRenderer({ antialias: true })\n      this.renderer.setSize(container.clientWidth, container.clientHeight)\n\n      container.appendChild(this.renderer.domElement)\n      window.addEventListener('resize', this.onWindowResize, false)\n      window.addEventListener('click', this.handleMouseMove, false)\n    },\n    addControls() {\n      this.controls = new OrbitControls(this.camera, this.renderer.domElement)\n    },\n    render() {\n      requestAnimationFrame(this.render)\n      this.renderer.render(this.scene, this.camera)\n    },\n    async loadObj(mtl, obj) {\n      await this.getInfo()\n      let _this = this\n      var onProgress = function (xhr) {\n        if (xhr.lengthComputable) {\n          var percentComplete = (xhr.loaded / xhr.total) * 100\n          console.log(Math.round(percentComplete, 2) + '% downloaded')\n        }\n      }\n\n      var onError = function () {}\n\n      var manager = new THREE.LoadingManager()\n      manager.addHandler(/\\.dds$/i, new DDSLoader())\n\n      // comment in the following line and import TGALoader if your asset uses TGA textures\n      // manager.addHandler( /\\.tga$/i, new TGALoader() );\n      // const materials = new THREE.MeshLambertMaterial({\n      //   color: 0x0000ff, //三角面颜色\n      //   wireframe: true //网格模型以线条的模式渲染\n      // })\n\n      let model = new MTLLoader(manager)\n        .setPath('/')\n        .load(mtl, function (materials) {\n          materials.preload()\n\n          new OBJLoader(manager)\n            .setMaterials(materials)\n            .setPath('/')\n            .load(\n              obj,\n              function (object) {\n                object.position.y = 0\n                _this.scene.add(object)\n              },\n              onProgress,\n              onError\n            )\n        })\n      console.log(model)\n      // const materials = new THREE.MeshLambertMaterial({\n      //   color: 0x0000ff, //三角面颜色\n      //   wireframe: true //网格模型以线条的模式渲染\n      // })\n      // new OBJLoader(manager)\n      //   // .setMaterials(materials)\n      //   .setPath('/')\n      //   .load(\n      //     '2.obj',\n      //     function (object) {\n      //       object.children.forEach((item, index) => {\n      //         if (_this.classrooms[index].status === 0) {\n      //           item.material = new THREE.MeshLambertMaterial({\n      //             color: 0xd54062\n      //           })\n      //           console.log(item)\n      //         }else  if (_this.classrooms[index].status === 1) {\n      //           item.material = new THREE.MeshLambertMaterial({\n      //             color: 0x799351\n      //           })\n      //           console.log(item)\n      //         }else  if (_this.classrooms[index].status === 2) {\n      //           item.material = new THREE.MeshLambertMaterial({\n      //             color: 0xffa36c\n      //           })\n      //           console.log(item)\n      //         }\n      //       })\n      //       object.position.y = 0\n      //       _this.scene.add(object)\n      //     },\n      //     onProgress,\n      //     onError\n      //   )\n    },\n    addLight() {\n      // 点光源\n      var point = new THREE.PointLight(0xffffff, 1)\n      point.position.set(100, 500, 100) //点光源位置\n      this.scene.add(point) //点光源添加到场景中\n      var pointLightHelper = new THREE.PointLightHelper(point, 1)\n      this.scene.add(pointLightHelper)\n\n      // 环境光\n      // var ambient = new THREE.AmbientLight(0xffffff)\n      // this.scene.add(ambient) //环境光对象添加到scene场景中\n    },\n    makeTextSprite(message, parameters) {\n      if (parameters === undefined) parameters = {}\n      var fontface = Object.prototype.hasOwnProperty.call(\n        parameters,\n        'fontface'\n      )\n        ? parameters['fontface']\n        : 'Arial'\n      // var fontface = parameters.hasOwnProperty('fontface')\n      //   ? parameters['fontface']\n      //   : 'Arial'\n\n      /* 字体大小 */\n      // var fontsize = parameters.hasOwnProperty('fontsize')\n      //   ? parameters['fontsize']\n      //   : 18\n      var fontsize = Object.prototype.hasOwnProperty.call(\n        parameters,\n        'fontsize'\n      )\n        ? parameters['fontsize']\n        : 18\n\n      /* 边框厚度 */\n      // var borderThickness = parameters.hasOwnProperty('borderThickness')\n      //   ? parameters['borderThickness']\n      //   : 4\n      var borderThickness = Object.prototype.hasOwnProperty.call(\n        parameters,\n        'borderThickness'\n      )\n        ? parameters['borderThickness']\n        : 4\n\n      /* 边框颜色 */\n      // var borderColor = parameters.hasOwnProperty('borderColor')\n      //   ? parameters['borderColor']\n      //   : { r: 0, g: 0, b: 0, a: 1.0 }\n      var borderColor = Object.prototype.hasOwnProperty.call(\n        parameters,\n        'borderColor'\n      )\n        ? parameters['borderColor']\n        : { r: 0, g: 0, b: 0, a: 1.0 }\n\n      /* 背景颜色 */\n      // var backgroundColor = parameters.hasOwnProperty('backgroundColor')\n      //   ? parameters['backgroundColor']\n      //   : { r: 255, g: 255, b: 255, a: 1.0 }\n      var backgroundColor = Object.prototype.hasOwnProperty.call(\n        parameters,\n        'backgroundColor'\n      )\n        ? parameters['backgroundColor']\n        : { r: 255, g: 255, b: 255, a: 1.0 }\n\n      /* 创建画布 */\n      var canvas = document.createElement('canvas')\n      var context = canvas.getContext('2d')\n\n      /* 字体加粗 */\n      context.font = 'Bold ' + fontsize + 'px ' + fontface\n\n      /* 获取文字的大小数据，高度取决于文字的大小 */\n      var metrics = context.measureText(message)\n      var textWidth = metrics.width\n\n      /* 背景颜色 */\n      context.fillStyle =\n        'rgba(' +\n        backgroundColor.r +\n        ',' +\n        backgroundColor.g +\n        ',' +\n        backgroundColor.b +\n        ',' +\n        backgroundColor.a +\n        ')'\n\n      /* 边框的颜色 */\n      context.strokeStyle =\n        'rgba(' +\n        borderColor.r +\n        ',' +\n        borderColor.g +\n        ',' +\n        borderColor.b +\n        ',' +\n        borderColor.a +\n        ')'\n      context.lineWidth = borderThickness\n\n      /* 绘制圆角矩形 */\n      this.roundRect(\n        context,\n        borderThickness / 2,\n        borderThickness / 2,\n        2 * textWidth + borderThickness,\n        2 * fontsize * 1.4 + borderThickness,\n        6\n      )\n\n      /* 字体颜色 */\n      context.fillStyle = '#FFF'\n      context.fillText(message, borderThickness, fontsize + borderThickness)\n\n      /* 画布内容用于纹理贴图 */\n      var texture = new THREE.Texture(canvas)\n      texture.needsUpdate = true\n\n      var spriteMaterial = new THREE.SpriteMaterial({ map: texture })\n      var sprite = new THREE.Sprite(spriteMaterial)\n\n      console.log(sprite.spriteMaterial)\n\n      /* 缩放比例 */\n      sprite.scale.set(10, 5, 0)\n\n      return sprite\n    },\n    add2dText() {\n      var earthGeometry = new THREE.SphereBufferGeometry(1, 16, 16)\n      var earthMaterial = new THREE.MeshPhongMaterial({\n        specular: 0x333333,\n        shininess: 5,\n        normalScale: new THREE.Vector2(0.85, 0.85),\n      })\n      let earth = new THREE.Mesh(earthGeometry, earthMaterial)\n      this.scene.add(earth)\n\n      var earthDiv = document.createElement('div')\n      earthDiv.className = 'label'\n      earthDiv.textContent = 'Earth'\n      earthDiv.style.marginTop = '-1em'\n      var earthLabel = new CSS2DObject(earthDiv)\n      earthLabel.position.set(0, 1, 0)\n      earth.add(earthLabel)\n    },\n    addMessage() {\n      this.text = this.makeTextSprite(`现在是${this.message}`, {\n        fontsize: 20,\n        borderColor: { r: 255, g: 0, b: 0, a: 0.4 } /* 边框黑色 */,\n        backgroundColor: { r: 255, g: 255, b: 255, a: 0.2 } /* 背景颜色 */,\n      })\n      this.text.center = new THREE.Vector2(0, 0)\n      this.scene.add(this.text)\n      this.text.position.set(10, 10, 0)\n    },\n    /* 绘制圆角矩形 */\n    roundRect(ctx, x, y, w, h, r) {\n      ctx.beginPath()\n      ctx.moveTo(x + r, y)\n      ctx.lineTo(x + w - r, y)\n      ctx.quadraticCurveTo(x + w, y, x + w, y + r)\n      ctx.lineTo(x + w, y + h - r)\n      ctx.quadraticCurveTo(x + w, y + h, x + w - r, y + h)\n      ctx.lineTo(x + r, y + h)\n      ctx.quadraticCurveTo(x, y + h, x, y + h - r)\n      ctx.lineTo(x, y + r)\n      ctx.quadraticCurveTo(x, y, x + r, y)\n      ctx.closePath()\n      ctx.fill()\n      ctx.stroke()\n    },\n    addCityText() {\n      var loader = new THREE.FontLoader()\n      let _this = this\n      loader.load('Arvo_Regular.json', function (font) {\n        var geometry = new THREE.TextGeometry('Hello three.js!', {\n          font: font,\n          size: 80,\n          height: 5,\n          curveSegments: 12,\n          bevelEnabled: true,\n          bevelThickness: 10,\n          bevelSize: 8,\n          bevelSegments: 5,\n        })\n        var mat = new THREE.MeshPhongMaterial({\n          color: 0xffe502,\n          specular: 0x009900,\n          shininess: 30,\n          shading: THREE.FlatShading,\n        })\n        var textObj = new THREE.Mesh(geometry, mat)\n        _this.scene.add(textObj)\n      })\n    },\n    async getInfo() {\n      let _this = this\n      await axios\n        .get(\n          ' http://49.234.121.178:7300/mock/5f3b3ddbdad41119bd229df4/example/mock'\n        )\n        .then((res) => {\n          if (res.status === 200) {\n            _this.classrooms = res.data.data.classrooms\n          }\n        })\n    },\n    handleMouseMove(event) {\n      // 将鼠标位置归一化为设备坐标。x 和 y 方向的取值范围是 (-1 to +1)\n      var raycaster = new THREE.Raycaster()\n      var mouse = new THREE.Vector2()\n      mouse.x = (event.clientX / window.innerWidth) * 2 - 1\n      mouse.y = -(event.clientY / window.innerHeight) * 2 + 1\n      // 通过摄像机和鼠标位置更新射线\n      raycaster.setFromCamera(mouse, this.camera)\n      // 计算物体和射线的焦点\n      var intersects = raycaster.intersectObjects(\n        this.scene.children[2].children\n      )\n      this.scene.children[2].children.forEach((item) => {\n        item.material = new THREE.MeshLambertMaterial({\n          color: 0xffffff,\n        })\n      })\n      if (intersects.length !== 0) {\n        for (var i = 0; i < this.scene.children[2].children.length; i++) {\n          intersects[0].object.material = new THREE.MeshBasicMaterial({\n            color: 0x009e60,\n          })\n        }\n      }\n\n      // 标签位置\n      // if (intersects.length) {\n      //   // console.log(intersects[0].object.name)\n      //   this.message = intersects[0].object.name\n      //   var vertices = new Float32Array([\n      //     ...intersects[0].object.geometry.attributes.position.array.slice(105)\n      //   ])\n      //   this.text.position.set(...vertices)\n\n      //   intersects[0].object.material = new THREE.MeshLambertMaterial({\n      //     color: 0x009e60\n      //   })\n      // }\n\n      this.renderer.render(this.scene, this.camera)\n    },\n    onWindowResize() {\n      // let windowHalfX = window.innerWidth / 2\n      // let windowHalfY = window.innerHeight / 2\n\n      this.camera.aspect = window.innerWidth / window.innerHeight\n      this.camera.updateProjectionMatrix()\n\n      this.renderer.setSize(window.innerWidth, window.innerHeight)\n    },\n    showFloor(num) {\n      this.scene.children.forEach((item, index) => {\n        item.visible = true\n        if (index > num + 1) {\n          item.visible = false\n        }\n      })\n    },\n    drawLine() {\n      // 基于准备好的dom，初始化echarts实例\n      let myChart = this.$echarts.init(document.getElementById('myChart'))\n      // 绘制图表\n      myChart.setOption({\n        title: {\n          text: '教室统计',\n          textStyle: {\n            color: '#eee',\n          },\n        },\n        tooltip: {},\n        series: [\n          {\n            name: '剩余间数',\n            type: 'pie',\n            data: [5, 20, 68],\n            itemStyle: {\n              color: '#b2ebf2',\n              shadowBlur: 200,\n              shadowColor: 'rgba(0, 0, 0, 0.5)',\n            },\n          },\n        ],\n      })\n    },\n    addGLTF() {\n      let _this = this\n      let loader = new GLTFLoader()\n\n      loader.load('./1.gltf', function (gltf) {\n        console.log(gltf.meshes)\n        console.log('gltf对象场景属性', gltf.scene)\n        console.log('gltf对象相机属性', gltf.cameras)\n        // 返回的场景对象gltf.scene插入到threejs场景中\n        _this.scene.add(gltf.scene)\n        console.log(this.scene)\n      })\n    },\n    changePosition() {\n      console.log(this.scene.children)\n      let obj = this.scene.children\n      console.log(obj[0])\n      obj[1].position.y = -10\n      obj[2].position.y = -20\n      obj[].position.y = -20\n    },\n  },\n  async mounted() {\n    this.init()\n    this.render()\n    this.addControls()\n    await this.loadObj('1c.mtl', '1c.obj')\n    await this.loadObj('2c.mtl', '2c.obj')\n    await this.loadObj('3c.mtl', '3c.obj')\n    await this.loadObj('4c.mtl', '4c.obj')\n    this.addLight()\n    this.changePosition()\n    // this.addGLTF()\n    // this.drawLine()\n    // this.addMessage()\n\n    // this.addCityText()\n    // this.add2dText()\n  },\n}\n</script>\n\n<style>\n#app {\n  font-family: 'Avenir', Helvetica, Arial, sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  text-align: center;\n  color: #2c3e50;\n}\n#container {\n  height: 100vh;\n}\n#button {\n  color: red;\n  position: absolute;\n  top: 30px;\n  display: flex;\n  justify-content: center;\n  width: 100vw;\n}\n#myChart {\n  position: absolute;\n  top: 200px;\n  left: 50px;\n}\n.box-card {\n  position: absolute;\n  width: 480px;\n  top: 30px;\n}\n</style>\n"]}]}